{"version":3,"sources":["screens/Navbar.js","apis/apiCore.js","screens/Tracker.js","screens/Footer.js","screens/index.js","screens/Map.js","screens/About.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","menuContainer","width","background","height","avatar","display","margin","spacing","listItem","color","menuItems","listIcon","Home","listText","listPath","ContactMail","Navbar","slider","useState","right","state","setState","toggleSideMenu","open","classes","Box","component","AppBar","position","style","Toolbar","IconButton","onClick","Typography","button","Link","to","variant","textDecoration","onClose","className","Divider","List","map","IsItem","key","ListItem","ListItemIcon","ListItemText","primary","fetchDataGlobal","a","axios","method","headers","result","data","StyledTableCell","withStyles","head","backgroundColor","palette","common","white","body","fontSize","TableCell","StyledTableRow","root","default","TableRow","flexGrow","marginBottom","table","row","maxWidth","container","maxHeight","worldFacts","marginTop","bar","bullet","transform","title","pos","card","boxShadow","borderBottom","cardDeath","Tracker","response","setData","useEffect","results","fetchData","console","log","recoveredPercentage","total","recovered","item","Grid","filter","country","justify","xs","md","Card","CardContent","start","end","cases","separator","deaths","toFixed","Paper","TableContainer","Table","stickyHeader","aria-label","overflow","TableHead","align","TableBody","_","reverse","scope","new","active","footer","copyright","icons","Footer","window","Map","frameborder","scrolling","marginheight","marginwidth","src","href","About","WrapText","fontWeight","padding","App","CssBaseline","exact","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2f8b6d94.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport RightMenu from \"@material-ui/core/Drawer\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  ListItem,\r\n  ListItemIcon,\r\n  List,\r\n  Divider,\r\n  Typography,\r\n  Box,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\nimport { Home, ContactMail } from \"@material-ui/icons\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  menuContainer: {\r\n    width: 250,\r\n    background: \"white\",\r\n    height: \"30rem\",\r\n  },\r\n  avatar: {\r\n    display: \"block\",\r\n    margin: \"0.5rem auto\",\r\n    width: theme.spacing(14),\r\n    height: theme.spacing(14),\r\n  },\r\n  listItem: {\r\n    color: \"black\",\r\n  },\r\n}));\r\n\r\nconst menuItems = [\r\n  {\r\n    listIcon: <Home />,\r\n    listText: \"Home\",\r\n    listPath: \"/\",\r\n  },\r\n  {\r\n    listIcon: <ExploreIcon />,\r\n    listText: \"Map\",\r\n    listPath: \"/map-tracker\",\r\n  },\r\n  {\r\n    listIcon: <ContactMail />,\r\n    listText: \"About\",\r\n    listPath: \"/about\",\r\n  },\r\n];\r\n\r\nfunction Navbar() {\r\n  const [state, setState] = useState({\r\n    right: false,\r\n  });\r\n\r\n  const toggleSideMenu = (slider, open) => () => {\r\n    setState({ ...state, [slider]: open });\r\n  };\r\n  const classes = useStyles();\r\n\r\n  const sideList = (slider) => (\r\n    <Box\r\n      className={classes.menuContainer}\r\n      component=\"div\"\r\n      onClick={toggleSideMenu(slider, false)}\r\n    >\r\n      <Divider />\r\n      <List>\r\n        {menuItems.map((IsItem, key) => (\r\n          <ListItem button key={key} component={Link} to={IsItem.listPath}>\r\n            <ListItemIcon className={classes.listItem}>\r\n              {IsItem.listIcon}\r\n            </ListItemIcon>\r\n            <ListItemText\r\n              className={classes.listItem}\r\n              primary={IsItem.listText}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  );\r\n  return (\r\n    <>\r\n      <Box component=\"nav\">\r\n        <AppBar position=\"sticky\" style={{ background: \"#4267b2\" }}>\r\n          <Toolbar>\r\n            <IconButton onClick={toggleSideMenu(\"right\", true)}>\r\n              <MenuIcon style={{ color: \"#f08113\" }} />\r\n            </IconButton>\r\n            <Typography\r\n              button\r\n              component={Link}\r\n              to={\"/\"}\r\n              variant=\"h5\"\r\n              style={{ color: \"white\", textDecoration: \"none\" }}\r\n            >\r\n              COVID-19 LiveStats\r\n            </Typography>\r\n            <RightMenu\r\n              open={state.right}\r\n              onClose={toggleSideMenu(\"right\", false)}\r\n            >\r\n              {sideList(\"right\")}\r\n            </RightMenu>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </Box>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import axios from \"axios\";\r\n\r\nconst fetchURL = \"https://covid-193.p.rapidapi.com/statistics\";\r\nconst host = \"covid-193.p.rapidapi.com\";\r\nconst key = \"8529a60fe1msh86abdd1bb20286cp190477jsnc68714d9e22c\";\r\nconst urlForCountry = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchDataCountry = async (country) => {\r\n  let countryDataUrl = urlForCountry;\r\n\r\n  if (country) {\r\n    countryDataUrl = `${urlForCountry}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(countryDataUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDataGlobal = async () => {\r\n  try {\r\n    const result = await axios(fetchURL, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"x-rapidapi-host\": host,\r\n        \"x-rapidapi-key\": key,\r\n      },\r\n    });\r\n\r\n    return result.data;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport PropTypes from \"prop-types\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableContainer,\r\n  Paper,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport CountUp from \"react-countup\";\r\nimport { fetchDataGlobal } from \"../apis/apiCore\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: \"#4267b2\",\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.background.default,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginBottom: 6,\r\n  },\r\n  table: {\r\n    width: \"100%\",\r\n  },\r\n  row: {\r\n    maxWidth: \"16%\",\r\n  },\r\n  container: {\r\n    maxHeight: 800,\r\n  },\r\n  worldFacts: {\r\n    width: \"100%\",\r\n    marginTop: 20,\r\n  },\r\n  bar: {\r\n    width: \"90%\",\r\n    \"& > * + *\": {\r\n      marginTop: 16,\r\n    },\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  card: {\r\n    margin: \"0 0 2% 2%\",\r\n    boxShadow: \"0 3px 5px 2px rgba(105,105,105, .9)\",\r\n    borderBottom: \"10px solid rgba(0, 255, 10, 0.5)\",\r\n  },\r\n  cardDeath: {\r\n    margin: \"0 0 2% 2%\",\r\n    boxShadow: \"0 3px 5px 2px rgba(105,105,105, .9)\",\r\n    borderBottom: \"10px solid rgba(205,92,92, 0.5)\",\r\n  },\r\n});\r\n\r\nfunction Tracker() {\r\n  const classes = useStyles();\r\n\r\n  const [data, setData] = useState({ response: [] });\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const results = await fetchDataGlobal();\r\n      setData(results);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  console.log(data);\r\n  const recoveredPercentage = (total, recovered) => {\r\n    return (recovered * 100) / total;\r\n  };\r\n  const item = data.response;\r\n\r\n  return (\r\n    <>\r\n      <Grid container className={classes.root} spacing={2}>\r\n        {item\r\n          .filter((item) => item.country === \"All\")\r\n          .map((item) => (\r\n            <Grid container className={classes.worldFacts} justify=\"center\">\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                md={2}\r\n                component={Card}\r\n                className={classes.card}\r\n              >\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" style={{ color: \"lightblue\" }}>\r\n                    Total Confirmed\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    key={item.country}\r\n                    style={{ color: \"#65dd9b\" }}\r\n                  >\r\n                    <CountUp start={0} end={item.cases.total} separator=\",\" />\r\n                  </Typography>\r\n                </CardContent>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                md={2}\r\n                component={Card}\r\n                className={classes.card}\r\n              >\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" style={{ color: \"lightblue\" }}>\r\n                    Total Recovered\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    key={item.country}\r\n                    style={{ color: \"#65dd9b\" }}\r\n                  >\r\n                    <CountUp\r\n                      start={0}\r\n                      end={item.cases.recovered}\r\n                      separator=\",\"\r\n                    />\r\n                  </Typography>\r\n                </CardContent>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                md={2}\r\n                component={Card}\r\n                className={classes.cardDeath}\r\n              >\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" style={{ color: \"lightblue\" }}>\r\n                    Total Deaths\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    key={item.country}\r\n                    style={{ color: \"#CD5C5C\" }}\r\n                  >\r\n                    <CountUp start={0} end={item.deaths.total} separator=\",\" />\r\n                  </Typography>\r\n                </CardContent>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                xs={12}\r\n                md={2}\r\n                component={Card}\r\n                className={classes.card}\r\n              >\r\n                <CardContent>\r\n                  <Typography variant=\"h5\" style={{ color: \"lightblue\" }}>\r\n                    Total Recovered %\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    key={item.country}\r\n                    style={{ color: \"#65dd9b\" }}\r\n                  >\r\n                    {recoveredPercentage(\r\n                      item.cases.total,\r\n                      item.cases.recovered\r\n                    ).toFixed(2) + \"%\"}\r\n                  </Typography>\r\n                </CardContent>\r\n              </Grid>\r\n            </Grid>\r\n          ))}\r\n        <Grid item xs={12} md={12}>\r\n          <Paper className={classes.table}>\r\n            <TableContainer className={classes.container}>\r\n              <Table\r\n                stickyHeader\r\n                aria-label=\"sticky table\"\r\n                style={{ overflow: \"wrap\" }}\r\n              >\r\n                <caption>\r\n                  Countries with 0 recovered cases means there is no data\r\n                  recieved from that country\r\n                </caption>\r\n                <TableHead>\r\n                  <TableRow style={{ backgroundColor: \"#4267b2\" }}>\r\n                    <StyledTableCell>Country</StyledTableCell>\r\n                    <StyledTableCell>Recovered</StyledTableCell>\r\n                    <StyledTableCell align=\"right\">Total Cases</StyledTableCell>\r\n                    <StyledTableCell align=\"right\">New Cases</StyledTableCell>\r\n                    <StyledTableCell align=\"right\">\r\n                      Active Cases\r\n                    </StyledTableCell>\r\n                    <StyledTableCell align=\"right\">Recovered</StyledTableCell>\r\n                    <StyledTableCell align=\"right\">Deaths</StyledTableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {_.sortBy(item, \"cases.total\")\r\n                    .reverse()\r\n                    .map((item) => (\r\n                      <StyledTableRow key={item.country}>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {item.country}\r\n                        </TableCell>\r\n                        <TableCell component=\"th\" scope=\"row\">\r\n                          {recoveredPercentage(\r\n                            item.cases.total,\r\n                            item.cases.recovered\r\n                          ).toFixed(2) + \"%\"}\r\n                        </TableCell>\r\n                        <StyledTableCell align=\"right\">\r\n                          {item.cases.total}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell align=\"right\">\r\n                          {item.cases.new}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell align=\"right\">\r\n                          {item.cases.active}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell\r\n                          align=\"right\"\r\n                          style={{ background: \"green\" }}\r\n                        >\r\n                          {item.cases.recovered}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell\r\n                          align=\"right\"\r\n                          style={{ background: \"red\" }}\r\n                        >\r\n                          {item.deaths.total}\r\n                        </StyledTableCell>\r\n                      </StyledTableRow>\r\n                    ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\nexport default Tracker;\r\n","import React from \"react\";\r\nimport { Paper, Typography, IconButton, Box } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  footer: {\r\n    backgroundColor: \"#4267b2\",\r\n  },\r\n  copyright: {\r\n    backgroundColor: \"#333\",\r\n    color: \"white\",\r\n  },\r\n  icons: {\r\n    height: theme.spacing(6),\r\n    width: theme.spacing(6),\r\n    color: \"white\",\r\n  },\r\n}));\r\nconst Footer = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Paper className={classes.footer}>\r\n        <Box align=\"center\">\r\n          <Typography variant=\"h6\" style={{ color: \"white\" }}>\r\n            Connect with me\r\n          </Typography>\r\n          <IconButton\r\n            aria-label=\"Linkedin.com\"\r\n            onClick={() =>\r\n              window.open(\r\n                \"https://www.linkedin.com/in/swarnjit-chahal-2239492a/\"\r\n              )\r\n            }\r\n          >\r\n            <LinkedInIcon className={classes.icons} />\r\n          </IconButton>\r\n          <IconButton\r\n            aria-label=\"GitHub.com\"\r\n            onClick={() => window.open(\"https://github.com/swarnjit\")}\r\n          >\r\n            <GitHubIcon className={classes.icons} />\r\n          </IconButton>\r\n        </Box>\r\n      </Paper>\r\n      <Paper className={classes.copyright}>\r\n        <Typography align=\"center\">Copyright © Swarnjit Chahal</Typography>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport Tracker from \"./Tracker\";\r\nimport Footer from \"./Footer\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Tracker />\r\n      <Footer />\r\n    </>\r\n  );\r\n}\r\nexport default Home;\r\n","import React from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport { Typography, Box } from \"@material-ui/core\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst Map = () => {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Box>\r\n        <Typography variant=\"h3\" color=\"textSecondary\">\r\n          Tracker Map for COVID-19\r\n        </Typography>\r\n        <iframe\r\n          width=\"100%\"\r\n          height=\"400\"\r\n          frameborder=\"5\"\r\n          scrolling=\"yes\"\r\n          marginheight=\"0\"\r\n          marginwidth=\"0\"\r\n          title=\"2019-nCoV\"\r\n          src=\"//arcgis.com/apps/Embed/index.html?webmap=14aa9e5660cf42b5b4b546dec6ceec7c&extent=77.3846,11.535,163.5174,52.8632&zoom=true&previewImage=false&scale=true&disable_scroll=true&theme=light\"\r\n        ></iframe>\r\n        <Typography>\r\n          Map Data by{\" \"}\r\n          <a href=\"https://systems.jhu.edu/research/public-health/ncov/\">\r\n            Johns Hopkins Center for Systems Science and Engineering\r\n          </a>\r\n        </Typography>\r\n      </Box>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\nimport Footer from \"./Footer\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Paper\r\n        container=\"div\"\r\n        align=\"center\"\r\n        style={{\r\n          background: \"lightblue\",\r\n          height: \"100%\",\r\n          WrapText: \"center\",\r\n        }}\r\n      >\r\n        <Typography variant=\"h4\" style={{ color: \"white\", fontWeight: \"bold\" }}>\r\n          About the COVID-19 LiveStats\r\n        </Typography>\r\n        <Typography\r\n          variant=\"subtitle1\"\r\n          align=\"justify\"\r\n          style={{ maxWidth: 500, margin: \"0 10px\" }}\r\n        >\r\n          The COVID-19 LiveStates updates about every 15 minutes. Map is updated\r\n          frequently by Johns Hopkins Center for Systems Science and\r\n          Engineering. Data is fetched from third party sources using APIs\r\n          provided by the source.\r\n        </Typography>\r\n        <Typography\r\n          variant=\"h4\"\r\n          style={{ color: \"white\", fontWeight: \"bold\", padding: 10 }}\r\n        >\r\n          Designed by:\r\n        </Typography>\r\n        <Typography variant=\"body1\">Swarnjit Singh Chahal</Typography>\r\n      </Paper>\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from \"react\";\nimport Home from \"./screens/index\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Map from \"./screens/Map\";\nimport About from \"./screens/About\";\n\nfunction App() {\n  return (\n    <>\n      <CssBaseline />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/map-tracker\" component={Map} />\n        <Route path=\"/about\" component={About} />\n      </Switch>{\" \"}\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}