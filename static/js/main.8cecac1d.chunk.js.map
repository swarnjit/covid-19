{"version":3,"sources":["screens/index.js","App.js","serviceWorker.js","index.js"],"names":["StyledTableCell","withStyles","theme","head","backgroundColor","palette","info","main","color","common","white","body","fontSize","TableCell","StyledTableRow","root","background","default","TableRow","useStyles","makeStyles","table","minWidth","Home","classes","useState","response","data","setData","useEffect","a","axios","method","headers","result","console","log","fetchData","AppBar","position","style","Toolbar","Typography","Box","variant","width","height","frameborder","scrolling","marginheight","marginwidth","title","src","href","TableContainer","component","Paper","Table","className","aria-label","TableHead","align","TableBody","map","item","key","country","scope","cases","total","new","active","recovered","deaths","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8cecac1d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Table,\r\n  TableContainer,\r\n  Paper,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Box,\r\n  Card,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.info.main,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.background.default,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nfunction Home() {\r\n  const classes = useStyles();\r\n  const [data, setData] = useState({ response: [] });\r\n  const [updatedNumbers, setupdatedNumbers] = useState({ body: [] });\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(\r\n        \"https://covid-193.p.rapidapi.com/statistics\",\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\r\n            \"x-rapidapi-key\":\r\n              \"8529a60fe1msh86abdd1bb20286cp190477jsnc68714d9e22c\",\r\n          },\r\n        }\r\n      );\r\n      setData(result.data);\r\n      console.log(result.data);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(\r\n        \"https://covid-19-live-stats.p.rapidapi.com/livestats\",\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"x-rapidapi-host\": \"covid-19-live-stats.p.rapidapi.com\",\r\n            \"x-rapidapi-key\":\r\n              \"8529a60fe1msh86abdd1bb20286cp190477jsnc68714d9e22c\",\r\n          },\r\n        }\r\n      );\r\n      setData(result.data);\r\n      console.log(result.data);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\" style={{ background: \"#911\" }}>\r\n        <Toolbar>\r\n          <Typography>COVID-19 Tracker</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Box>\r\n        <Typography variant=\"h3\" style={{ color: \"lightblue\" }}>\r\n          Tracker Map for COVID-19\r\n        </Typography>\r\n        <iframe\r\n          width=\"100%\"\r\n          height=\"400\"\r\n          frameborder=\"0\"\r\n          scrolling=\"no\"\r\n          marginheight=\"0\"\r\n          marginwidth=\"0\"\r\n          title=\"2019-nCoV\"\r\n          src=\"//arcgis.com/apps/Embed/index.html?webmap=14aa9e5660cf42b5b4b546dec6ceec7c&extent=77.3846,11.535,163.5174,52.8632&zoom=true&previewImage=false&scale=true&disable_scroll=true&theme=light\"\r\n        ></iframe>\r\n        <Typography>\r\n          Map Data by{\" \"}\r\n          <a href=\"https://systems.jhu.edu/research/public-health/ncov/\">\r\n            Johns Hopkins Center for Systems Science and Engineering\r\n          </a>\r\n        </Typography>\r\n      </Box>\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <StyledTableCell>Country</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Total Cases</StyledTableCell>\r\n              <StyledTableCell align=\"right\">New Cases</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Active Cases</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Recovered</StyledTableCell>\r\n              <StyledTableCell align=\"right\">Deaths</StyledTableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {data.response.map((item) => (\r\n              <StyledTableRow key={item.country}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {item.country}\r\n                </TableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {item.cases.total}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {item.cases.new}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {item.cases.active}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">\r\n                  {item.cases.recovered}\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\" style={{ background: \"red\" }}>\r\n                  {item.deaths.total}\r\n                </StyledTableCell>\r\n              </StyledTableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </>\r\n  );\r\n}\r\nexport default Home;\r\n","import React from \"react\";\nimport Home from \"./screens/index\";\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}