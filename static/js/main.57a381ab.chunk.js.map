{"version":3,"sources":["screens/Navbar.js","screens/Tracker.js","screens/index.js","screens/Map.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","menuContainer","width","background","height","avatar","display","margin","spacing","listItem","color","menuItems","listIcon","Home","listText","listPath","ContactMail","Navbar","slider","useState","right","state","setState","toggleSideMenu","open","classes","Box","component","AppBar","position","style","Toolbar","IconButton","onClick","Typography","variant","onClose","className","Divider","List","map","IsItem","key","ListItem","button","Link","to","ListItemIcon","ListItemText","primary","StyledTableCell","withStyles","head","backgroundColor","palette","info","main","common","white","body","fontSize","TableCell","StyledTableRow","root","default","TableRow","table","row","maxWidth","container","maxHeight","minWidth","bullet","transform","title","pos","marginBottom","Tracker","response","data","setData","useEffect","a","axios","method","headers","result","fetchData","Card","align","CardContent","filter","item","country","cases","total","recovered","deaths","Paper","TableContainer","Table","stickyHeader","aria-label","TableHead","TableBody","scope","new","active","Map","frameborder","scrolling","marginheight","marginwidth","src","href","App","CssBaseline","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57a381ab.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport RightMenu from \"@material-ui/core/Drawer\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  ListItem,\r\n  ListItemIcon,\r\n  List,\r\n  Divider,\r\n  Typography,\r\n  Box,\r\n  ListItemText,\r\n} from \"@material-ui/core\";\r\nimport { Home, ContactMail } from \"@material-ui/icons\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ExploreIcon from \"@material-ui/icons/Explore\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  menuContainer: {\r\n    width: 250,\r\n    background: \"#311\",\r\n    height: \"30rem\",\r\n  },\r\n  avatar: {\r\n    display: \"block\",\r\n    margin: \"0.5rem auto\",\r\n    width: theme.spacing(14),\r\n    height: theme.spacing(14),\r\n  },\r\n  listItem: {\r\n    color: \"lightblue\",\r\n  },\r\n}));\r\n\r\nconst menuItems = [\r\n  {\r\n    listIcon: <Home />,\r\n    listText: \"Home\",\r\n    listPath: \"/\",\r\n  },\r\n  {\r\n    listIcon: <ExploreIcon />,\r\n    listText: \"Map\",\r\n    listPath: \"/map-tracker\",\r\n  },\r\n  {\r\n    listIcon: <ContactMail />,\r\n    listText: \"About\",\r\n    listPath: \"/about\",\r\n  },\r\n];\r\n\r\nconst Navbar = () => {\r\n  const [state, setState] = useState({\r\n    right: false,\r\n  });\r\n\r\n  const toggleSideMenu = (slider, open) => () => {\r\n    setState({ ...state, [slider]: open });\r\n  };\r\n  const classes = useStyles();\r\n\r\n  const sideList = (slider) => (\r\n    <Box\r\n      className={classes.menuContainer}\r\n      component=\"div\"\r\n      onClick={toggleSideMenu(slider, false)}\r\n    >\r\n      <Divider />\r\n      <List>\r\n        {menuItems.map((IsItem, key) => (\r\n          <ListItem button key={key} component={Link} to={IsItem.listPath}>\r\n            <ListItemIcon className={classes.listItem}>\r\n              {IsItem.listIcon}\r\n            </ListItemIcon>\r\n            <ListItemText\r\n              className={classes.listItem}\r\n              primary={IsItem.listText}\r\n            />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Box>\r\n  );\r\n  return (\r\n    <>\r\n      <Box component=\"nav\">\r\n        <AppBar position=\"static\" style={{ background: \"black\" }}>\r\n          <Toolbar>\r\n            <IconButton onClick={toggleSideMenu(\"right\", true)}>\r\n              <MenuIcon style={{ color: \"orange\" }} />\r\n            </IconButton>\r\n            <Typography variant=\"h5\" style={{ color: \"lightblue\" }}>\r\n              COVID-19 Tracker\r\n            </Typography>\r\n            <RightMenu\r\n              open={state.right}\r\n              onClose={toggleSideMenu(\"right\", false)}\r\n            >\r\n              {sideList(\"right\")}\r\n            </RightMenu>\r\n          </Toolbar>\r\n        </AppBar>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Typography,\r\n  Table,\r\n  TableContainer,\r\n  Paper,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableRow,\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport axios from \"axios\";\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.info.main,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    \"&:nth-of-type(odd)\": {\r\n      backgroundColor: theme.palette.background.default,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    width: \"100%\",\r\n  },\r\n  row: {\r\n    maxWidth: 100,\r\n  },\r\n  container: {\r\n    maxHeight: 400,\r\n  },\r\n  root: {\r\n    minWidth: 200,\r\n    backgroundColor: \"#245175\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nfunction Tracker() {\r\n  const classes = useStyles();\r\n  const [data, setData] = useState({ response: [] });\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const result = await axios(\r\n        \"https://covid-193.p.rapidapi.com/statistics\",\r\n        {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"x-rapidapi-host\": \"covid-193.p.rapidapi.com\",\r\n            \"x-rapidapi-key\":\r\n              \"8529a60fe1msh86abdd1bb20286cp190477jsnc68714d9e22c\",\r\n          },\r\n        }\r\n      );\r\n      setData(result.data);\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root} align=\"center\">\r\n        <CardContent>\r\n          <Typography variant=\"h4\" style={{ color: \"white\" }}>\r\n            Total Confirmed Cases\r\n            {data.response\r\n              .filter((item) => item.country === \"All\")\r\n              .map((item) => (\r\n                <Box>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    key={item.country}\r\n                    style={{ color: \"#65dd9b\" }}\r\n                  >\r\n                    {item.cases.total}\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" style={{ color: \"white\" }}>\r\n                    Total Recovered\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    key={item.country}\r\n                    style={{ color: \"#65dd9b\" }}\r\n                  >\r\n                    {item.cases.recovered}\r\n                  </Typography>\r\n                  <Typography variant=\"h4\" style={{ color: \"white\" }}>\r\n                    Total Died\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"h4\"\r\n                    key={item.country}\r\n                    style={{ color: \"red\" }}\r\n                  >\r\n                    {item.deaths.total}\r\n                  </Typography>\r\n                </Box>\r\n              ))}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n      <Paper className={classes.table}>\r\n        <TableContainer className={classes.container}>\r\n          <Table stickyHeader aria-label=\"sticky table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <StyledTableCell className={classes.row}>\r\n                  Country\r\n                </StyledTableCell>\r\n                <StyledTableCell align=\"right\">Total Cases</StyledTableCell>\r\n                <StyledTableCell align=\"right\">New Cases</StyledTableCell>\r\n                <StyledTableCell align=\"right\">Active Cases</StyledTableCell>\r\n                <StyledTableCell align=\"right\">Recovered</StyledTableCell>\r\n                <StyledTableCell align=\"right\">Deaths</StyledTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {data.response.map((item) => (\r\n                <StyledTableRow key={item.country}>\r\n                  <TableCell component=\"th\" scope=\"row\">\r\n                    {item.country}\r\n                  </TableCell>\r\n                  <StyledTableCell align=\"right\">\r\n                    {item.cases.total}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"right\">\r\n                    {item.cases.new}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"right\">\r\n                    {item.cases.active}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell\r\n                    align=\"right\"\r\n                    style={{ background: \"green\" }}\r\n                  >\r\n                    {item.cases.recovered}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"right\" style={{ background: \"red\" }}>\r\n                    {item.deaths.total}\r\n                  </StyledTableCell>\r\n                </StyledTableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    </>\r\n  );\r\n}\r\nexport default Tracker;\r\n","import React from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport Tracker from \"./Tracker\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Tracker />\r\n    </>\r\n  );\r\n}\r\nexport default Home;\r\n","import React from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport { Typography, Box } from \"@material-ui/core\";\r\n\r\nconst Map = () => {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Box>\r\n        <Typography variant=\"h3\" style={{ color: \"lightblue\" }}>\r\n          Tracker Map for COVID-19\r\n        </Typography>\r\n        <iframe\r\n          width=\"100%\"\r\n          height=\"400\"\r\n          frameborder=\"5\"\r\n          scrolling=\"yes\"\r\n          marginheight=\"0\"\r\n          marginwidth=\"0\"\r\n          title=\"2019-nCoV\"\r\n          src=\"//arcgis.com/apps/Embed/index.html?webmap=14aa9e5660cf42b5b4b546dec6ceec7c&extent=77.3846,11.535,163.5174,52.8632&zoom=true&previewImage=false&scale=true&disable_scroll=true&theme=light\"\r\n        ></iframe>\r\n        <Typography>\r\n          Map Data by{\" \"}\r\n          <a href=\"https://systems.jhu.edu/research/public-health/ncov/\">\r\n            Johns Hopkins Center for Systems Science and Engineering\r\n          </a>\r\n        </Typography>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\nimport Home from \"./screens/index\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { Route } from \"react-router-dom\";\nimport Map from \"./screens/Map\";\n\nfunction App() {\n  return (\n    <>\n      <CssBaseline />\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/map-tracker\" component={Map} />\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}